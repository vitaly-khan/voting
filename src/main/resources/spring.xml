<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
       http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/security
       https://www.springframework.org/schema/security/spring-security.xsd">

    <context:component-scan base-package="ru.vitalykhan.voting.repository"/>
    <context:component-scan base-package="ru.vitalykhan.voting"/>

    <context:property-placeholder location="classpath:db/hsqldb.properties" system-properties-mode="OVERRIDE"/>

    <jdbc:initialize-database enabled="${database.init}">
        <jdbc:script location="${jdbc.initLocation}"/>
        <jdbc:script location="${jdbc.testDataLocation}"/>
    </jdbc:initialize-database>

    <!--    Spring Data JPA-->
    <!--TODO: change to real dataSource!-->

    <jpa:repositories base-package="ru.vitalykhan.voting.repository"/>

    <bean id="dataSource"
          class="org.springframework.jdbc.datasource.DriverManagerDataSource"
          p:driverClassName="org.hsqldb.jdbcDriver"
          p:url="${database.url}"
          p:username="${database.username}"
          p:password="${database.password}"/>

    <!--    Spring ORM-->

    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
          p:dataSource-ref="dataSource"
          p:packagesToScan="ru.vitalykhan.voting.model">

        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
            </bean>
        </property>

        <property name="jpaPropertyMap">
            <map>
                <entry key="#{T(org.hibernate.cfg.AvailableSettings).SHOW_SQL}" value="${hibernate.showSql}"/>
                <entry key="#{T(org.hibernate.cfg.AvailableSettings).FORMAT_SQL}" value="${hibernate.format_sql}"/>
                <entry key="#{T(org.hibernate.cfg.AvailableSettings).USE_SQL_COMMENTS}"
                       value="${hibernate.use_sql_comments}"/>
                <entry key="#{T(org.hibernate.cfg.AvailableSettings).JPA_PROXY_COMPLIANCE}" value="false"/>
                <entry key="#{T(org.hibernate.cfg.AvailableSettings).HBM2DDL_AUTO}" value="${hibernate.hbm2ddl.auto}"/>

                <!--https://github.com/hibernate/hibernate-orm/blob/master/documentation/src/main/asciidoc/userguide/chapters/caching/Caching.adoc#caching-provider-jcache-->
                <!--                <entry key="#{T(org.hibernate.cfg.AvailableSettings).CACHE_REGION_FACTORY}" value="org.hibernate.cache.jcache.internal.JCacheRegionFactory"/>-->
                <!--                <entry key="#{T(org.hibernate.cache.jcache.ConfigSettings).PROVIDER}" value="org.ehcache.jsr107.EhcacheCachingProvider"/>-->
                <!--                <entry key="#{T(org.hibernate.cfg.AvailableSettings).USE_SECOND_LEVEL_CACHE}" value="true"/>-->
                <!--                <entry key="#{T(org.hibernate.cfg.AvailableSettings).USE_QUERY_CACHE}" value="false"/> &lt;!&ndash;default&ndash;&gt;-->

                <!--                <entry key="javax.persistence.validation.group.pre-persist" value="ru.javawebinar.topjava.View$Persist"/>-->
                <!--                <entry key="javax.persistence.validation.group.pre-update" value="ru.javawebinar.topjava.View$Persist"/>-->
                <!--
                                    <entry key="#{T(org.hibernate.cfg.AvailableSettings).HBM2DDL_SCRIPTS_ACTION}" value="drop-and-create"/>
                                    <entry key="#{T(org.hibernate.cfg.AvailableSettings).HBM2DDL_SCRIPTS_CREATE_TARGET}" value="${TOPJAVA_ROOT}/config/ddl/create.ddl"/>
                                    <entry key="#{T(org.hibernate.cfg.AvailableSettings).HBM2DDL_SCRIPTS_DROP_TARGET}" value="${TOPJAVA_ROOT}/config/ddl/drop.ddl"/>
                                    <entry key="#{T(org.hibernate.cfg.AvailableSettings).HBM2DDL_AUTO}" value="create"/>
                -->
            </map>
        </property>
    </bean>

    <!--    Spring Tx-->
    <tx:annotation-driven/>
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
          p:entityManagerFactory-ref="entityManagerFactory"/>


    <!--        <bean class="ru.javawebinar.topjava.repository.JpaUtil"/>-->

    <!--    <beans profile="tomcat">-->
    <!--        <jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/topjava"/>-->
    <!--        <context:property-placeholder location="classpath:db/tomcat.properties" system-properties-mode="OVERRIDE"/>-->
    <!--    </beans>-->

    <!--    Spring Web MVC-->
    <context:component-scan base-package="ru.vitalykhan.voting.controller"/>

    <bean class="ru.vitalykhan.voting.controller.json.JacksonObjectMapper" id="objectMapper"
          factory-method="getMapper"/>

    <bean class="org.springframework.format.support.FormattingConversionServiceFactoryBean" id="conversionService">
        <property name="formatters">
            <set>
                <bean class="ru.vitalykhan.voting.controller.converter.LocalDateFormatter"/>
            </set>
        </property>
    </bean>

    <mvc:annotation-driven conversion-service="conversionService">

<!--    Adds customized ObjectMapper to Spring MVC-->
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="objectMapper" ref="objectMapper"/>
            </bean>
        </mvc:message-converters>

<!--    Gives quick access to @AuthenticatedPrincipal-->
        <mvc:argument-resolvers>
            <bean class="org.springframework.security.web.method.annotation.AuthenticationPrincipalArgumentResolver "/>
        </mvc:argument-resolvers>
    </mvc:annotation-driven>

    <!--    Spring Security-->
    <bean class="org.springframework.security.crypto.factory.PasswordEncoderFactories" id="passwordEncoder"
          factory-method="createDelegatingPasswordEncoder"/>

    <security:authentication-manager>
        <security:authentication-provider user-service-ref="securityUserService">
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <security:http create-session="stateless">
        <security:http-basic/>
        <security:intercept-url pattern="/restaurants/**" access="hasRole('ROLE_ADMIN')"/>
        <security:intercept-url pattern="/menus/todays" access="permitAll()"/>
        <security:intercept-url pattern="/menus/**" access="hasRole('ROLE_ADMIN')"/>
        <security:intercept-url pattern="/dishes/**" access="hasRole('ROLE_ADMIN')"/>
        <security:intercept-url pattern="/votes/filter" access="hasRole('ROLE_ADMIN')"/>
        <security:intercept-url pattern="/votes/todays" access="hasRole('ROLE_ADMIN')"/>
        <security:intercept-url pattern="/votes/**" access="hasRole('ROLE_USER')"/>
        <security:intercept-url pattern="/profile/register" access="isAnonymous()"/>
        <security:intercept-url pattern="/profile/**" access="isAuthenticated()"/>
        <security:intercept-url pattern="/**" access="permitAll()"/>
        <security:csrf disabled="true"/>
    </security:http>

</beans>