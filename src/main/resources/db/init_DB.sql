DROP TABLE vote IF EXISTS;
DROP TABLE user IF EXISTS;
DROP TABLE dish IF EXISTS;
DROP TABLE menu IF EXISTS;
DROP TABLE restaurant IF EXISTS;
DROP SEQUENCE global_seq IF EXISTS;

CREATE SEQUENCE global_seq START WITH 100000;

CREATE TABLE user
(
    id         INTEGER GENERATED BY DEFAULT AS SEQUENCE global_seq PRIMARY KEY,
    name       VARCHAR(255)                         NOT NULL,
    email      VARCHAR(255) UNIQUE                  NOT NULL,
    password   VARCHAR(255)                         NOT NULL,
    role       VARCHAR(12)  DEFAULT 'USER'  NOT NULL,
    registered TIMESTAMP    DEFAULT now()           NOT NULL,
    enabled    BOOLEAN      DEFAULT TRUE            NOT NULL
);

CREATE TABLE restaurant
(
    id   INTEGER GENERATED BY DEFAULT AS SEQUENCE global_seq PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE menu
(
    id            INTEGER GENERATED BY DEFAULT AS SEQUENCE global_seq PRIMARY KEY,
    date          DATE    NOT NULL,
    restaurant_id INTEGER NOT NULL,
    CONSTRAINT date_restaurant_id_uq UNIQUE (date, restaurant_id),  --TODO: change to INDEX?
    FOREIGN KEY (restaurant_id) REFERENCES restaurant (id) ON DELETE CASCADE
);

CREATE TABLE dish
(
    id      INTEGER GENERATED BY DEFAULT AS SEQUENCE global_seq PRIMARY KEY,
    name    VARCHAR(255) NOT NULL,
    price   INTEGER      NOT NULL,
    menu_id INTEGER      NOT NULL,
    CONSTRAINT name_menu_id_uq UNIQUE (name, menu_id),              --TODO: change to INDEX?
    FOREIGN KEY (menu_id) REFERENCES menu (id) ON DELETE CASCADE
);

CREATE TABLE vote
(
    id            INTEGER GENERATED BY DEFAULT AS SEQUENCE global_seq PRIMARY KEY,
    date          DATE    NOT NULL,
    restaurant_id INTEGER NOT NULL,
    user_id       INTEGER NOT NULL,
    CONSTRAINT date_user_id_uq UNIQUE (date, user_id),              --TODO: change to INDEX?
    FOREIGN KEY (restaurant_id) REFERENCES restaurant (id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES user (id) ON DELETE CASCADE
);

-- CREATE UNIQUE INDEX meals_unique_user_datetime_idx
--     ON meals (user_id, date_time)DROP TABLE vote IF EXISTS;
DROP TABLE user IF EXISTS;
DROP TABLE dish IF EXISTS;
DROP TABLE menu IF EXISTS;
DROP TABLE restaurant IF EXISTS;
DROP SEQUENCE global_seq IF EXISTS;

CREATE SEQUENCE global_seq START WITH 100000;

CREATE TABLE user
(
    id         INTEGER GENERATED BY DEFAULT AS SEQUENCE global_seq PRIMARY KEY,
    name       VARCHAR(255)                         NOT NULL,
    email      VARCHAR(255) UNIQUE                  NOT NULL,
    password   VARCHAR(255)                         NOT NULL,
    role       VARCHAR(12)  DEFAULT 'USER'  NOT NULL,
    registered TIMESTAMP    DEFAULT now()           NOT NULL,
    enabled    BOOLEAN      DEFAULT TRUE            NOT NULL
);

CREATE TABLE restaurant
(
    id   INTEGER GENERATED BY DEFAULT AS SEQUENCE global_seq PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE menu
(
    id            INTEGER GENERATED BY DEFAULT AS SEQUENCE global_seq PRIMARY KEY,
    date          DATE    NOT NULL,
    restaurant_id INTEGER NOT NULL,
    CONSTRAINT date_restaurant_id_uq UNIQUE (date, restaurant_id),  --TODO: change to INDEX?
    FOREIGN KEY (restaurant_id) REFERENCES restaurant (id) ON DELETE CASCADE
);
CREATE INDEX menu_unique_date_idx ON menu (date);

CREATE TABLE dish
(
    id      INTEGER GENERATED BY DEFAULT AS SEQUENCE global_seq PRIMARY KEY,
    name    VARCHAR(255) NOT NULL,
    price   INTEGER      NOT NULL,
    menu_id INTEGER      NOT NULL,
    CONSTRAINT name_menu_id_uq UNIQUE (name, menu_id),              --TODO: change to INDEX?
    FOREIGN KEY (menu_id) REFERENCES menu (id) ON DELETE CASCADE
);

CREATE TABLE vote
(
    id            INTEGER GENERATED BY DEFAULT AS SEQUENCE global_seq PRIMARY KEY,
    date          DATE    NOT NULL,
    restaurant_id INTEGER NOT NULL,
    user_id       INTEGER NOT NULL,
    CONSTRAINT date_user_id_uq UNIQUE (date, user_id),              --TODO: change to INDEX?
    FOREIGN KEY (restaurant_id) REFERENCES restaurant (id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES user (id) ON DELETE CASCADE
);

-- CREATE UNIQUE INDEX meals_unique_user_datetime_idx
--     ON meals (user_id, date_time)